Description: Use default cell is none specified
 If no cell names are specified on the command line try and use the
 default cell.
Author: Bill MacAllister <bill@ca-zephyr.org>
Last-Update: 2023-01-07 
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: kafs-client/src/kafs-check-config.c
===================================================================
--- kafs-client.orig/src/kafs-check-config.c	2023-01-08 02:06:36.630226726 +0000
+++ kafs-client/src/kafs-check-config.c	2023-01-08 02:09:17.313725428 +0000
@@ -12,10 +12,17 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <fcntl.h>
 #include <getopt.h>
 #include <kafs/cellserv.h>
 #include <kafs/profile.h>
 
+// default cell file path
+static const char rootcell[] = "/proc/net/afs/rootcell";
+
+// Debug setting
+int opt_debug = 0;
+
 static void error_report(const char *fmt, ...)
 {
 	va_list va;
@@ -53,8 +60,72 @@
 	exit(2);
 }
 
+/*
+ * Print a message and bail out if the default cell is not available
+ */
+void error_get_default_cell(void)
+{
+	fprintf(stderr, "ERROR: The default cell is NOT set\n");
+	fprintf(stderr, "\n");
+	fprintf(stderr,
+		"INFO: Ensure that thiscell is set in the [defaults]\n");
+	fprintf(stderr,
+		"      section of the /etc/kafs/client.conf file.\n");
+	exit(1);
+}
+
+/*
+ * Read the name of default cell.
+ */
+static char *get_default_cell(void)
+{
+	ssize_t n;
+	char buf[260];
+	char *cell;
+	char *nl;
+	int fd;
+
+	if (access(rootcell, F_OK) != 0) {
+		if (opt_debug) {
+			fprintf(stdout, "INFO: file not found %s\n", rootcell);
+		}
+		error_get_default_cell();
+	}
+
+	fd = open(rootcell, O_RDONLY);
+	if (fd == -1) {
+		fprintf(stderr, "ERROR: problem opening %s\n", rootcell);
+		error_get_default_cell();
+	}
+	n = read(fd, buf, sizeof(buf) - 2);
+	if (n == -1) {
+		fprintf(stderr, "ERROR: problem reading %s\n", rootcell);
+		error_get_default_cell();
+	}
+	close(n);
+	if (n == 0) {
+		error_get_default_cell();
+	}
+
+	buf[n] = 0;
+	nl = memchr(buf, '\n', n);
+	if (nl == buf) {
+		error_get_default_cell();
+	}
+	*nl = 0;
+
+	cell = strdup(buf);
+	if (cell == 0) {
+		fprintf(stderr,
+			"ERROR: zero length default cell in %s\n", rootcell);
+		error_get_default_cell();
+	}
+	return cell;
+}
+
 int main(int argc, char *argv[])
 {
+	struct kafs_cell *cell;
 	struct kafs_lookup_context ctx = {
 		.report.error		= error_report,
 		.want_ipv4_addrs	= true,
@@ -63,6 +134,7 @@
 	const char *filev[10], **filep = NULL;
 	bool dump_profile = false, dump_db = false;
 	int opt, filec = 0;
+	int cell_cnt = 0;
 
 	if (argc > 1 && strcmp(argv[1], "--help") == 0)
 		usage(argv[0]);
@@ -78,6 +150,7 @@
 			filev[filec++] = optarg;
 			break;
 		case 'v':
+			++opt_debug;
 			if (!ctx.report.verbose)
 				ctx.report.verbose = verbose;
 			else
@@ -141,8 +214,7 @@
 		kafs_cellserv_dump(kafs_cellserv_db);
 
 	for (; *argv; argv++) {
-		struct kafs_cell *cell;
-
+		++cell_cnt;
 		cell = kafs_lookup_cell(*argv, &ctx);
 		if (cell) {
 			printf("\n");
@@ -150,7 +222,25 @@
 			kafs_dump_cell(cell);
 		}
 	}
-
+	if (cell_cnt == 0) {
+		char *thiscell;
+		thiscell = get_default_cell();
+		if (opt_debug) {
+			printf("Default cell from %s: %s\n",
+				rootcell,
+				thiscell);
+		}
+		cell = kafs_lookup_cell(thiscell, &ctx);
+		if (cell) {
+			printf("\n");
+			printf("=== Found cell %s ===\n", cell->name);
+			kafs_dump_cell(cell);
+		} else {
+			printf("\n");
+			printf("INFO: Default cell not found %s", thiscell);
+		}
+	}
 	kafs_clear_lookup_context(&ctx);
+
 	return 0;
 }
